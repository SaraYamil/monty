#include "monty.h"

typedef void (*OpcodeFunction)(stack_t**);

void process_opcode(FILE *file, stack_t **stack, unsigned int *line_number);
void push(stack_t **stack, int value);
void pall(stack_t **stack);
void pint(stack_t **stack);
void pop(stack_t **stack);
void swap(stack_t **stack);
void add(stack_t **stack);
void nop(stack_t **stack);
void sub(stack_t **stack);
void stack_div(stack_t **stack);
void stack_mul(stack_t **stack);
void stack_mod(stack_t **stack);

typedef struct {
    char opcode[5];
    OpcodeFunction function;
} OpcodeEntry;

OpcodeEntry opcodeTable[] = {   
    { "pall", pall },
    { "pint", pint },
    { "pop", pop },
    { "swap", swap },
    { "add", add },
    { "nop", nop },
    { "sub", sub },
    { "div", stack_div },
    { "mul", stack_mul },
    { "mod", stack_mod },
};

int main(int argc, char *argv[])
{
    FILE *file;
    stack_t *stack;
    unsigned int line_number;

    if (argc != 2)
    {
        fprintf(stderr, "Usage: %s file\n", argv[0]);
        exit(EXIT_FAILURE);
    }

    file = fopen(argv[1], "r");
    if (file == NULL)
    {
        fprintf(stderr, "Error: cannot open file %s\n", argv[1]);
        exit(EXIT_FAILURE);
    }

    stack = NULL;
    line_number = 1;

    while (!feof(file))
    {
        process_opcode(file, &stack, &line_number);
        line_number++;
    }

    fclose(file);
    free(stack);
    return EXIT_SUCCESS;
}

void process_opcode(FILE *file, stack_t **stack, unsigned int *line_number)
{
    char opcode[20];
    /* int value; */
    int numOpCodes;
    int i;
    OpcodeFunction function;

    if (fscanf(file, "%4s", opcode) != 1)
    {
        fprintf(stderr, "Error: invalid opcode at line %u\n", *line_number);
        exit(EXIT_FAILURE);
    }

    numOpCodes = sizeof(opcodeTable) / sizeof(opcodeTable[0]);
    function = NULL;

    for (i = 0; i < numOpCodes; i++) {
        if (strcmp(opcodeTable[i].opcode, opcode) == 0) {
            function = opcodeTable[i].function;
            break;
        }
    }

    if (function != NULL) {
        function(stack);
    } else {
        fprintf(stderr, "L%u: unknown instruction %s\n", *line_number, opcode);
        exit(EXIT_FAILURE);
    }
}
